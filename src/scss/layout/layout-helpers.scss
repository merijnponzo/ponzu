[class*="#{$helpers-layout-ratio-prefix}"] {
  position: relative;
  &::after {
    content: "";
    display: block;
    /* how much is the height compared to the width (%) */
    padding-top: 50%;
  }
  & > :first-child {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}
// generate width helpers
@each $name, $width-percent, $max-width-px,
  $breakpoints in $helpers-layout-width
{
  @include max-width-class($name, $width-percent, $max-width-px);
  @each $breakpoint in $breakpoints {
    @include select-breakpoint($breakpoint) {
      @include max-width-class(
        $name,
        $width-percent,
        $max-width-px,
        $breakpoint
      );
    }
  }
}
// ratio
@each $name, $padding-top-percent-default, $breakpoints in $helpers-layout-ratio
{
  @include ratio-class($name, $padding-top-percent-default);
  @each $breakpoint, $padding-top-percent in $breakpoints {
    // generate width helpers width breakpoints
    @each $breakpoint in $breakpoints {
      @include select-breakpoint($breakpoint) {
        @include ratio-class($name, $padding-top-percent, $breakpoint);
      }
    }
  }
}
// loop trough spacers (eg : pt- )
@each $name, $css-properties, $breakpoints in $helpers-layout-spacers {
  // create spacer class on each spacing setting ( eg : 1 : 16px )
  @each $sub-name, $amount in $helpers-layout-spacing {
    // (eg pt-1 )
    @each $breakpoint in $breakpoints {
      @if $breakpoint != 0 {
        .#{$name}#{$sub-name}\3a#{$breakpoint} {
          // (eg padding-top)
          @each $css-property in $css-properties {
            #{$css-property}: rfs(#{$amount});
          }
        }
      } @else {
        .#{$name}#{$sub-name} {
          // (eg padding-top)
          @each $css-property in $css-properties {
            #{$css-property}: rfs(#{$amount});
          }
        }
      }
    }
  }
}
