@mixin appearance($value) {
  -webkit-appearance: $value;
  -moz-appearance: $value;
  appearance: $value;
}

@mixin no-select {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

// create a width class like w--50:breakpoint
@mixin max-width-class($name, $width-percent, $max-width-px, $breakpoint: 0) {
  @if $breakpoint == "all" {
    .#{$name} {
      width: calc(#{$width-percent} - (var(--gap) * 2));
      max-width: calc(#{$max-width-px} - (var(--gap) * 2));
    }
  } @else {
    .#{$name}\3a#{$breakpoint} {
      width: calc(#{$width-percent} - (var(--gap) * 2));
      max-width: calc(#{$max-width-px} - (var(--gap) * 2));
    }
  }
}
@mixin ratio-class($name, $w, $h, $breakpoint: 0) {
  @if $breakpoint == "all" {
    .#{$helpers-layout-ratio-prefix}#{$name} {
      &:before {
        content: " ";
        display: block;
        width: 100%;
        padding-top: ($h / $w) * 100%;
      }
    }
  } @else {
    .#{$helpers-layout-ratio-prefix}#{$name}\3a#{$breakpoint} {
      &:before {
        content: " ";
        display: block;
        width: 100%;
        padding-top: ($w / $h) * 100%;
      }
    }
  }
}
// create a width class like w--50:breakpoint
@mixin any-property-class(
  $name,
  $sub-name,
  $value,
  $css-properties,
  $breakpoint: 0
) {
  @if $breakpoint == "all" {
    .#{$name}#{$sub-name} {
      @each $css-property in $css-properties {
        #{$css-property}: rfs(#{$value});
        @if $css-property == "gap" {
          --gap: rfs(#{$value});
        }
      }
    }
  } @else if $breakpoint != 0 {
    .#{$name}#{$sub-name}\3a#{$breakpoint} {
      @each $css-property in $css-properties {
        #{$css-property}: rfs(#{$value});
        @if $css-property == "gap" {
          --gap: rfs(#{$value});
        }
      }
    }
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: " ";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin flex-count($i, $breakpoint) {
  @if $breakpoint == "all" {
    .dir-x > * {
      flex: $i;
    }
  } @else {
    .dir-#{$i}\3a#{$breakpoint} > * {
      flex: $i;
    }
  }
}
